Pong R√©plica (Unity)

Esta √© uma recria√ß√£o do cl√°ssico Atari Pong, desenvolvida no Unity com recursos modernos como f√≠sica suave, IA inimiga e um sistema simples de pontua√ß√£o.

üéÆ Funcionalidades

Raquete do jogador controlada pelo mouse.

Raquete inimiga que segue a bola com IA b√°sica.

F√≠sica da bola com mec√¢nica de quique.

Dire√ß√£o da bola aleat√≥ria a cada rein√≠cio.

Sistema de pontua√ß√£o com exibi√ß√£o na UI.

Rein√≠cio do jogo ap√≥s a marca√ß√£o de ponto.

üõ†Ô∏è Configura√ß√£o do Projeto

Vers√£o do Unity: Desenvolvido no Unity 6.1 (pode rodar em vers√µes mais recentes).

Configura√ß√£o da Cena:

Duas raquetes (Jogador e Inimigo).

Bola com Rigidbody2D e Collider2D.

Paredes e zonas de pontua√ß√£o com colliders e tags.

Elementos de texto na UI usando TextMeshPro para exibir a pontua√ß√£o.

Main Camera configurada como Orthographic.

üìÇ Vis√£o Geral dos Scripts

Core.cs

Atua como o controlador central do jogo.

Cont√©m refer√™ncias ao GameManager, Ball, PlayerController e Enemy.

Garante que todos os sistemas sejam habilitados no in√≠cio.

public class Core : MonoBehaviour
{
    public static Core Instance;
    [SerializeField] public GameManager _gameManager;
    [SerializeField] public ball _ball;
    [SerializeField] public PlayerController _playerController;
    [SerializeField] public Enemy _enemy;

    void Awake()
    {
        _gameManager.enabled = true;
        _ball.enabled = true;
        _playerController.enabled = true;
        _enemy.enabled = true;
    }
}


GameManager.cs

Gerencia o sistema de pontua√ß√£o.

Atualiza a UI com os pontos do jogador e do computador.

Oculta o cursor do mouse durante o jogo.

PlayerController.cs

A raquete do jogador √© controlada pela posi√ß√£o do mouse.

Movimento suave utilizando f√≠sica (Rigidbody2D.MovePosition).

Enemy.cs

A raquete inimiga segue a posi√ß√£o y da bola.

Adiciona um pouco de aleatoriedade para evitar previs√£o perfeita.

Move usando f√≠sica para manter consist√™ncia.

ball.cs

Controla o movimento e colis√µes da bola.

Mant√©m velocidade constante (linearVelocity.normalized * speedBall).

Detecta colis√µes com raquetes e paredes.

Atualiza a pontua√ß√£o quando a bola atinge as zonas de score (jogador ou inimigo).

Reseta a posi√ß√£o com dire√ß√£o aleat√≥ria ap√≥s cada ponto.

üéØ Como Funciona

No in√≠cio, a bola surge no centro com uma dire√ß√£o aleat√≥ria.

O jogador movimenta sua raquete com o mouse.

A IA inimiga segue o eixo y da bola com velocidade limitada.

Quando a bola colide com uma raquete, sua dire√ß√£o muda com base no ponto de impacto.

Se a bola atravessa uma zona de pontua√ß√£o:

Um ponto √© marcado.

A bola √© reiniciada ap√≥s um pequeno atraso.

üöÄ Pr√≥ximos Passos / Poss√≠veis Melhorias

Adicionar n√≠veis de dificuldade (escala de velocidade da IA).

Adicionar efeitos sonoros para colis√µes e pontua√ß√µes.

Criar menu inicial e menu de pausa na UI.

Suporte para 2 jogadores (teclado ou controle).

Efeitos de p√≥s-processamento para melhorar os visuais.

üì∑ Pr√©via
<img width="1920" height="1080" alt="image" src="https://github.com/user-attachments/assets/5652a7bf-0d5e-4964-8d20-36fdef73501b"/>
